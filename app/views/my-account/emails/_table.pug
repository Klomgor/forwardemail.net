include ../../_sort-header
include ../../_pagination

table.table.table-hover.table-bordered.table-sm
  thead.thead-dark
    tr
      th.text-center.align-middle(scope="col")= t("Email")
      th.text-center.align-middle(scope="col")= t("Status")
      th.text-center.align-middle(scope="col")= t("Actions")
    tbody
      if emails.length === 0
        tr
          td.alert.alert-info(colspan="3")
            if isSANB(ctx.query.q)
              = t("No emails exist for that search.")
            else
              = t("No emails have been stored yet.  Please check back later.")
      else
        each email in emails
          tr
            td.align-middle
              ul.list-unstyled.mb-0
                li
                  span.badge.badge-pill.badge-dark= "ID"
                  = " "
                  span.small: code= email.id
                li
                  span.badge.badge-pill.badge-dark= "CREATED"
                  = " "
                  span.small.text-monospace
                    span.dayjs(data-time=email.created_at.getTime())= dayjs(email.created_at).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
                li
                  span.badge.badge-pill.badge-dark= "DATE"
                  = " "
                  span.small.text-monospace
                    span.dayjs(data-time=email.date.getTime())= dayjs(email.date).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
                //- MAIL FROM
                li
                  span.badge.badge-pill.badge-dark= "MAIL FROM"
                  = " "
                  span.small: code= email.envelope.from
                //- RCPT TO
                li
                  span.badge.badge-pill.badge-dark= "RCPT TO"
                  = " "
                  ul.list-inline.d-inline-block.mb-0
                    each rcpt in email.envelope.to
                      li.list-inline-item
                        small: code= rcpt
                //- Message-ID Header
                li
                  span.badge.badge-pill.badge-primary= "MESSAGE-ID"
                  = " "
                  span.small: code= email.messageId
                //- Subject Header
                li
                  span.badge.badge-pill.badge-primary= "SUBJECT"
                  = " "
                  span.small: code= email.subject
                //- Response
                if email.accepted.length > 0 || email.rejectedErrors.length > 0
                  li
                    ul.list-inline.mb-0
                      each accepted in email.accepted
                        li.list-inline-item.d-inline
                          span.badge.badge-pill.badge-success 250
                          = " "
                          span.small: code= accepted
                      each rejectedError in email.rejectedErrors
                        li.list-inline-item.d-inline
                          - let badgeClass = "badge-success";
                          if rejectedError.responseCode >= 500
                            - badgeClass = "badge-danger";
                          else if rejectedError.responseCode >= 400
                            - badgeClass = "badge-warning";
                          else if rejectedError.responseCode >= 300
                            - badgeClass = "badge-primary";
                          if email.envelope.to.length > 1
                            strong.small= rejectedError.recipient
                            = " "
                          span.badge.badge-pill(class=badgeClass)= rejectedError.responseCode
                          = " "
                          span.small: code!= rejectedError.response ? ansiHTML(rejectedError.response) : ansiHTML(rejectedError.message)
            td.align-middle.text-center
              //- pending (secondary)
              //- queued (dark)
              //- sent (success)
              //- partially_sent (warning)
              //- deferred (warning)
              //- bounced (danger)
              //- rejected (danger)
              - let className = "badge-secondary";
              case email.status
                when 'pending'
                  - className = "badge-secondary";
                when 'queued'
                  - className = "badge-dark";
                when 'sent'
                  - className = "badge-success";
                when 'partially_sent'
                  - className = "badge-primary";
                when 'deferred'
                  - className = "badge-warning";
                when 'bounced'
                  - className = "badge-danger";
                when 'rejected'
                  - className = "badge-danger";
              span.badge.text-uppercase(class=className)= titleize(humanize(email.status))
            td.align-middle.text-center
              ul.list-inline.mb-0
                li.list-inline-item
                  a.btn.btn-dark.btn-sm(
                    href=l(`/my-account/emails/${email.id}`),
                    target="_blank",
                    data-toggle="tooltip",
                    data-placement="bottom"
                  ): i.fa.fa-fw.fa-search
                li.list-inline-item
                  a.btn.btn-primary.btn-sm(
                    href=l(`/my-account/emails/${email.id}.eml`),
                    data-toggle="tooltip",
                    data-placement="bottom",
                    title=t("Download")
                  ): i.fa.fa-fw.fa-file-download
                //- Only allow remove if
                //- - pending
                //- - queued
                //- - deferred
                if ['pending','queued','deferred'].includes(email.status)
                  li.list-inline-item
                    form.ajax-form.confirm-prompt(
                      action=l(`/my-account/emails/${email.id}`),
                      method="POST",
                      autocomplete=config.env === "test" ? "off" : randomstring()
                    )
                      input(type="hidden", name="_method", value="DELETE")
                      button.btn.btn-danger.btn-sm(
                        type="submit",
                        data-toggle="tooltip",
                        data-title=t("Remove"),
                        data-placement="bottom"
                      ): i.fa.fa-fw.fa-remove

+paginate('#table-emails')

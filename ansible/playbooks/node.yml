# Copyright (c) Forward Email LLC
# SPDX-License-Identifier: BUSL-1.1

---
- hosts: imap:pop3:smtp:http:bree:sqlite:mx1:mx2
  name: Node.js
  become: true
  become_user: root
  vars:
    node_version: "18.20.4"
  tasks:
    # install n and node lts
    - name: Check that n exists
      stat:
        path: /home/deploy/n
      register: n_result
    - name: Install n
      become: true
      become_user: deploy
      shell:
        cmd: curl -L https://raw.githubusercontent.com/mklement0/n-install/stable/bin/n-install | bash -s -- -y {{node_version}}
      when: not n_result.stat.exists

    - name: Debug Node version
      debug:
        var: node_version

    - name: Debug n exists
      debug:
        var: n_result.stat.exists

    - name: Check Node version
      become: true
      become_user: deploy
      shell: source /home/deploy/.bashrc && node --version | sed "s/v//"
      register: node_version_installed
      when: n_result.stat.exists
      args:
         executable: /bin/bash

    - name: Debug Node version installed
      debug:
        var: node_version_installed

    - name: Debug Setup Node version comparison
      debug:
        var: n_result.stat.exists and node_version_installed and not node_version_installed.failed and node_version_installed.stdout is version(node_version, "ne", version_type="semver")

    - name: Setup Node
      become: true
      become_user: deploy
      shell: source /home/deploy/.bashrc && n install {{node_version}} && n prune
      args:
         executable: /bin/bash
      when: n_result.stat.exists and node_version_installed and not node_version_installed.failed and node_version_installed.stdout is version(node_version, "ne", version_type="semver")

    # install pm2 and pnpm
    - name: Check if pm2 exists
      stat:
        path: /home/deploy/n/bin/pm2
      register: pm2_result
    - name: Install pm2
      become: true
      become_user: deploy
      shell: source /home/deploy/.bashrc && npm install -g pm2
      args:
         executable: /bin/bash
      when: not pm2_result.stat.exists
    - name: Cleanup tmp
      become: true
      become_user: deploy
      cron:
        name: "cleanup-tmp"
        hour: "*"
        minute: "0"
        job: "NODE_ENV=production /home/deploy/n/bin/node /var/www/production/current/jobs/cleanup-tmp.js > /dev/null 2>&1"
    #
    # TODO: alert of any users with admin permission on website
    #
    # NOTE: we check shell capabilities and recent access for the following users
    #       on a recurring minute basis in order to alert admins of suspicious behavior
    #       - checks ~/.zsh_history and ~/.bash_history and alerts admins
    #       - checks and alerts admins for recent SSH access
    #           - /var/run/utmp (who's logged in now)
    #           - /var/log/wtmp (historical login data)
    #           - /var/log/btmp (failed login attempts)
    #           (if any of these files do not exist then alert admins)
    #       - `who` command yields output of who is logged in as well
    #       - checks that `netstat`, `tcpdump`, `get`, `wget`, `curl`, `nc`, and `gcc` are not installed
    #       - clears shell history for the given users once emailed to admins in encrypted ZIP
    #
    #       (this isn't a 100% solution but would keep us apprised as a minimal safety guard)
    #
    #       <https://orca.security/resources/blog/understand-shell-commands-detect-malicious-behavior/>
    #
    #       - it also checks for suspicious processes (2 = non-kernel)
    #
    #       <https://github.com/dennyzhang/devops_public/blob/tag_v2/python/detect_suspicious_process/detect_suspicious_process.py>
    #       <https://medium.com/@dennyzhang001/detect-suspicious-linux-processes-c4f764ebff95>
    #
    #       sudo ps -efww --ppid 2 -p 2 -p 1 --deselect -o user,uid,pid,rss,%cpu,command --sort rss,cpu
    #
    #       https://github.com/sindresorhus/ps-list
    #       https://github.com/simonepri/pidtree
    #       https://wiki.ubuntu.com/BasicSecurity/DidIJustGetOwned
    #
    #       If suspicious activity/user detected, then copy these to include in encrypted ZIP file:
    #       - /var/log/auth.log
    #       - /var/log/syslog
    #       - /var/log/ufw.log
    #       - /var/log/apt
    #       - /var/log/wtmp
    #       - /var/run/utmp
    #       - /var/log/btmp
    #       - /var/log/faillog
    #
    #       Also detect when `users` and `groups` have changed from the normal (e.g. root/devops/deploy only)
    #       (can also detect `useradd`, `to group`, `to shadow group` strings in /var/log/auth.log)
    #
    #       `apt install chkrootkit` and `chkrootkit` and output to log
    #       (and if output contains any of these strings then include output in ZIP file and consider compromised)
    #       "INFECTED" or "Vulnerable but disabled"
    #
    #       We may want to add RKHunter in the future
    #
    #       TODO: Also detect when we need to rotate SSH keys and alert admins if SSH keys need rotated
    #
    #- name: Check recent access
    #  become: true
    #  become_user: root
    #  cron:
    #    name: "check-recent-access"
    #    hour: "*"
    #    minute: "*"
    #    job: "NODE_ENV=production /home/deploy/n/bin/node /var/www/production/current/jobs/check-recent-access.js > /dev/null 2>&1"
    - name: Check PM2
      become: true
      become_user: deploy
      cron:
        name: "check-pm2"
        hour: "*"
        minute: "*/20"
        job: "NODE_ENV=production /home/deploy/n/bin/node /var/www/production/current/jobs/check-pm2.js > /dev/null 2>&1"
    - name: Reload pm2 every 6 hours
      become: true
      become_user: deploy
      cron:
        name: "reload"
        hour: "*/6"
        minute: "0"
        job: "/home/deploy/n/bin/node /home/deploy/n/bin/pm2 reload all > /dev/null 2>&1"
    - name: Check if pnpm exists
      stat:
        path: /home/deploy/n/bin/pnpm
      register: pnpm_result
    - name: Install pnpm
      become: true
      become_user: deploy
      shell: source /home/deploy/.bashrc && npm install -g pnpm@9.15.9
      args:
         executable: /bin/bash
      when: not pnpm_result.stat.exists
    # install fonts
    - name: Accept fonts license
      shell:
        cmd: echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
    - name: Install fonts
      apt:
        name:
          - fonts-powerline
          - xfonts-75dpi
          - fontconfig
          - libxrender1
          - xfonts-base
          - ttf-mscorefonts-installer
          - libfontconfig
          - fonts-noto-cjk
          - fonts-noto-cjk-extra
        update_cache: true
    # install puppeteer dep
    - name: Install puppeteer dep
      apt:
        name:
          - libnss3-dev
          - libatk1.0-0
          - libnss3
          - libatk1.0-0
          - libatk-bridge2.0-0
          - libx11-xcb1
          - libxcb-dri3-0
          - libxcomposite1
          - libxfixes3
          - libcups2
          - libdrm2
          - libxrandr2
          - libgbm1
          - libasound2
          - libpangocairo-1.0-0
          - libgtk-3-0
        update_cache: true
    # install libjpeg-turbo8 for wkhtmltopdf
    - name: Install libjpeg-turbo8
      apt:
        name:
          - libjpeg-turbo8
        update_cache: true
    # install wkhtmltopdf
    - name: Install wkhtmltopdf
      shell: |
        wget "https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.$(lsb_release -c -s)_$(dpkg --print-architecture).deb"
        sudo dpkg -i "wkhtmltox_0.12.6.1-2.$(lsb_release -c -s)_$(dpkg --print-architecture).deb"
    # configure pm2
    - name: Create pm2 directory
      file:
        path: /var/www
        state: directory
        owner: deploy
        # https://chmodcommand.com/chmod-770/
        mode: "0770"
        recurse: true
    - name: Install pm2-logrotate
      become: true
      become_user: deploy
      shell: source /home/deploy/.bashrc && pm2 install pm2-logrotate
      args:
         executable: /bin/bash
    - name: Check that pm2 startup script exists
      stat:
        path: /etc/systemd/system/pm2-deploy.service
      register: pm2_startup_result
    - name: Install pm2 startup script
      shell: sudo env PATH=$PATH:/home/deploy/n/bin pm2 startup ubuntu -u deploy --hp /home/deploy

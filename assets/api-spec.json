{
  "openapi": "3.0.0",
  "info": {
    "title": "Forward Email API",
    "description": "Welcome to the comprehensive API documentation for Forward Email. This API allows you to manage email forwarding, domains, aliases, outbound emails, and more programmatically.\n\n## Key Features\n*   **Domain Management:** Create, retrieve, update, delete, and verify domains.\n*   **Alias Management:** Manage email aliases, including creation, updates, and recipient management.\n*   **Outbound SMTP:** Send emails via SMTP, manage limits, and track sent emails.\n*   **Account & Logs:** Manage your account details and download activity logs.\n*   **Security:** Encrypt TXT records and manage domain members/invites.\n*   **Coming Soon:** Features like CardDAV contacts, CalDAV calendars, and IMAP/POP3 message/folder management are planned.\n\n## Authentication\nMost endpoints require authentication using your **API Key**. Provide the API Key as the `username` in the Basic Authentication header, leaving the password empty.\n\n```http\nAuthorization: Basic QVBJX1RPS0VOOg==\n```\n(Replace `API_TOKEN` with your actual key before Base64 encoding)\n\nEndpoints related to **Alias Contacts, Calendars, Messages, and Folders** (currently marked as \"Coming Soon\") will use a generated alias username and password for Basic Authentication.\n\n## Errors\nThe API uses standard HTTP status codes to indicate success or failure. Error responses include a JSON body with a `message` field detailing the error.\n\n| Status Code | Meaning             |\n|-------------|---------------------|\n| 200         | OK                  |\n| 400         | Bad Request         |\n| 401         | Unauthorized        |\n| 403         | Forbidden           |\n| 404         | Not Found           |\n| 429         | Too Many Requests   |\n| 500         | Internal Server Error|\n| 501         | Not Implemented     |\n| 502         | Bad Gateway         |\n| 503         | Service Unavailable |\n| 504         | Gateway Time-out    |\n\n*If you encounter a `5xx` error, please contact [api@forwardemail.net](mailto:api@forwardemail.net).*\n\n## Localization\nAPI responses are translated based on the user's detected locale or the `Accept-Language` header. Over 25 languages are supported.\n\n## Pagination\nEndpoints returning lists support pagination via query parameters.\n\n| Parameter    | Type    | Optional | Description                                                                 | Default | Constraints        |\n|--------------|---------|----------|-----------------------------------------------------------------------------|---------|--------------------|\n| `page`       | Integer | Yes      | Page number to retrieve.                                                    | 1       | `>= 1`             |\n| `limit`      | Integer | Yes      | Number of results per page.                                                 | 10      | `>= 1`, `<= 50`    |\n| `pagination` | Boolean | Yes      | Opt-in to pagination behavior (required before Nov 1st, 2024 for some endpoints). | false   |                    |\n\n**Pagination Headers:**\n*   `X-Page-Count`: Total page count.\n*   `X-Page-Current`: Current page number.\n*   `X-Page-Size`: Number of items on the current page.\n*   `X-Item-Count`: Total number of items across all pages.\n*   `Link`: Navigation links (prev, next, first, last).\n\n**Example:**\n```bash\ncurl \"https://api.forwardemail.net/v1/domains?page=2&limit=20&pagination=true\" \\\n  -u API_TOKEN:\n```\n\n## Recommended Libraries\n*   **Ruby:** [Faraday](https://github.com/lostisland/faraday)\n*   **Python:** [requests](https://requests.readthedocs.io/en/latest/)\n*   **Java:** [OkHttp](https://square.github.io/okhttp/)\n*   **PHP:** [Guzzle](https://docs.guzzlephp.org/en/stable/)\n*   **JavaScript/Node.js:** [superagent](https://github.com/visionmedia/superagent) (Maintained by Forward Email)\n*   **Go:** `net/http`\n*   **.NET:** [RestSharp](https://restsharp.dev/)",
    "version": "1.0.0",
    "contact": {
      "name": "Forward Email Support",
      "url": "https://forwardemail.net",
      "email": "api@forwardemail.net"
    }
  },
  "servers": [
    {
      "url": "https://api.forwardemail.net",
      "description": "Forward Email API Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "\nUse your API Key as the **username** for Basic Authentication. Leave the password field empty.\n\n**Example:**\nIf your API Key is `YOUR_API_KEY`, the Base64 encoded value for the `Authorization` header would be `echo -n \"YOUR_API_KEY:\" | base64`.\n\n```http\nAuthorization: Basic WU9VUl9BUElfS0VZOg==\n```\n"
      },
      "AliasAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "\nUse the generated **alias username and password** for Basic Authentication. This applies to endpoints under:\n*   Alias Contacts (CardDAV)\n*   Alias Calendars (CalDAV)\n*   Alias Messages (IMAP/POP3)\n*   Alias Folders (IMAP/POP3)\n\n*(Note: These features are currently marked as \"Coming Soon\")*\n\n**Example:**\nIf the alias username is `alias@domain.com` and password is `GENERATED_PASSWORD`, the Base64 encoded value would be `echo -n \"alias@domain.com:GENERATED_PASSWORD\" | base64`.\n\n```http\nAuthorization: Basic YWxpYXNAZG9tYWluLmNvbTpHRU5FUkFURURfUEFTU1dPUkQ=\n```\n"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "Account": {
        "type": "object",
        "required": ["id", "email", "plan", "object"],
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_newsletter": {
            "type": "boolean"
          },
          "plan": {
            "type": "string",
            "example": "free"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "max_quota_per_alias": {
            "type": "integer",
            "format": "int64"
          },
          "full_email": {
            "type": "string",
            "format": "email"
          },
          "display_name": {
            "type": "string"
          },
          "otp_enabled": {
            "type": "boolean"
          },
          "last_locale": {
            "type": "string"
          },
          "address_country": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "example": "user"
          },
          "locale": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "address_html": {
            "type": "string"
          },
          "api_token": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "sessions": [],
          "has_newsletter": true,
          "plan": "free",
          "email": "test1@test1.com",
          "max_quota_per_alias": 10737418240,
          "full_email": "test1@test1.com",
          "display_name": "test1@test1.com",
          "otp_enabled": false,
          "last_locale": "en",
          "address_country": "None",
          "id": "683fb2e81cc5d449a0d4cd9d",
          "object": "user",
          "locale": "en",
          "created_at": "2025-06-04T02:43:52.646Z",
          "updated_at": "2025-06-04T02:43:55.350Z",
          "address_html": "",
          "api_token": "15ac16ae21784aa2cb4d5508"
        }
    },
      "Email": {
        "type": "object",
        "required": ["id", "object", "status", "alias", "domain", "user"],
        "properties": {
          "is_redacted": {
            "type": "boolean"
          },
          "hard_bounces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "soft_bounces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_bounce": {
            "type": "boolean"
          },
          "alias": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "example": "sent"
          },
          "is_locked": {
            "type": "boolean"
          },
          "envelope": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "email"
              },
              "to": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          },
          "messageId": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string"
          },
          "accepted": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "example": "email"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "link": {
            "type": "string",
            "format": "uri"
          }
        },
        "example": {
          "is_redacted": true,
          "hard_bounces": [],
          "soft_bounces": [],
          "is_bounce": false,
          "alias": "67a180fxxxxxxxe46a3f0edf",
          "domain": "5efae85dxxxxxxxf4bb53c7a",
          "user": "5efabd3907xxxxxxx12890b8",
          "status": "sent",
          "is_locked": false,
          "envelope": {
            "from": "test@test.com",
            "to": ["test@test1.com"]
          },
          "messageId": "1a04fee3-5230-4a85-9111-a2c376835885@shaunwarman.com",
          "date": "2025-06-04T03:32:19.000Z",
          "subject": "testing",
          "accepted": ["test@test1.com"],
          "id": "683fbe4d5baef1b583a1xxxx",
          "object": "email",
          "created_at": "2025-06-04T03:32:29.138Z",
          "updated_at": "2025-06-04T03:32:33.847Z",
          "link": "https://forwardemail.net/my-account/emails/683fbe4d5baef1b583a11e54"
        }
      },
      "EmailList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Email"
        }
      },
      "SMTP": {
        "type": "object",
        "properties": {
            "from": {
              "type": "string",
              "format": "email",
              "description": "The email address of the sender (must exist as an alias of the domain)."
            },
            "to": {
              "oneOf": [
                { "type": "string" },
                {
                  "type": "array",
                  "items": { "type": "string", "format": "email" }
                }
              ],
              "description": "Comma-separated list or an array of recipients for the 'To' header."
            },
            "cc": {
              "oneOf": [
                { "type": "string" },
                {
                  "type": "array",
                  "items": { "type": "string", "format": "email" }
                }
              ],
              "description": "Comma-separated list or an array of recipients for the 'Cc' header."
            },
            "bcc": {
              "oneOf": [
                { "type": "string" },
                {
                  "type": "array",
                  "items": { "type": "string", "format": "email" }
                }
              ],
              "description": "Comma-separated list or an array of recipients for the 'Bcc' header."
            },
            "subject": {
              "type": "string",
              "description": "The subject of the email."
            },
            "text": {
              "type": "string",
              "description": "The plaintext version of the message."
            },
            "html": {
              "type": "string",
              "description": "The HTML version of the message."
            },
            "attachments": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "description": "An array of attachment objects (see Nodemailer's common fields)."
            },
            "sender": {
              "type": "string",
              "format": "email",
              "description": "The email address for the 'Sender' header."
            },
            "replyTo": {
              "type": "string",
              "format": "email",
              "description": "The email address for the 'Reply-To' header."
            },
            "inReplyTo": {
              "type": "string",
              "description": "The Message-ID the message is in reply to."
            },
            "references": {
              "oneOf": [
                { "type": "string" },
                {
                  "type": "array",
                  "items": { "type": "string" }
                }
              ],
              "description": "Space-separated list or an array of Message-IDs."
            },
            "attachDataUrls": {
              "type": "boolean",
              "description": "If true, converts data: images in the HTML content to embedded attachments."
            },
            "watchHtml": {
              "type": "string",
              "description": "Apple Watch specific HTML version of the message."
            },
            "amp": {
              "type": "string",
              "description": "AMP4EMAIL specific HTML version of the message."
            },
            "icalEvent": {
              "type": "object",
              "description": "An iCalendar event as an alternative message content."
            },
            "alternatives": {
              "type": "array",
              "items": { "type": "object" },
              "description": "An array of alternative message content."
            },
            "encoding": {
              "type": "string",
              "description": "Encoding for the text and HTML strings (e.g., 'utf-8', 'hex', 'base64')."
            },
            "raw": {
              "type": "string",
              "description": "Custom generated RFC822 formatted message (instead of using Nodemailer generation)."
            },
            "textEncoding": {
              "type": "string",
              "enum": ["quoted-printable", "base64"],
              "description": "Encoding forced to be used for text values."
            },
            "priority": {
              "type": "string",
              "enum": ["high", "normal", "low"],
              "description": "Priority level for the email."
            },
            "headers": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": true
                },
                {
                  "type": "array",
                  "items": { "type": "object" }
                }
              ],
              "description": "Object or array of additional header fields."
            },
            "messageId": {
              "type": "string",
              "description": "Optional Message-ID for the 'Message-ID' header."
            },
            "date": {
              "oneOf": [
                { "type": "string", "format": "date-time" },
                { "type": "string" }
              ],
              "description": "Optional Date header. Cannot be more than 30 days in the future."
            },
            "list": {
              "type": "object",
              "description": "Optional object of List-* headers."
            }
          }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "has_newsletter": { "type": "boolean" },
          "ignore_mx_check": { "type": "boolean" },
          "retention_days": { "type": "integer" },
          "has_regex": { "type": "boolean" },
          "has_catchall": { "type": "boolean" },
          "allowlist": {
            "type": "array",
            "items": { "type": "string" }
          },
          "denylist": {
            "type": "array",
            "items": { "type": "string" }
          },
          "restricted_alias_names": {
            "type": "array",
            "items": { "type": "string" }
          },
          "has_adult_content_protection": { "type": "boolean" },
          "has_phishing_protection": { "type": "boolean" },
          "has_executable_protection": { "type": "boolean" },
          "has_virus_protection": { "type": "boolean" },
          "is_catchall_regex_disabled": { "type": "boolean" },
          "has_smtp": { "type": "boolean" },
          "is_smtp_suspended": { "type": "boolean" },
          "plan": { "type": "string" },
          "max_recipients_per_alias": { "type": "integer" },
          "smtp_port": { "type": "string" },
          "name": { "type": "string" },
          "has_mx_record": { "type": "boolean" },
          "has_txt_record": { "type": "boolean" },
          "has_dkim_record": { "type": "boolean" },
          "has_return_path_record": { "type": "boolean" },
          "has_dmarc_record": { "type": "boolean" },
          "has_recipient_verification": { "type": "boolean" },
          "has_custom_verification": { "type": "boolean" },
          "verification_record": { "type": "string" },
          "id": { "type": "string" },
          "object": {
            "type": "string",
            "enum": ["domain"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "storage_used": { "type": "integer" },
          "storage_used_by_aliases": { "type": "integer" },
          "storage_quota": { "type": "integer" },
          "smtp_dns_records": {
            "type": "object",
            "properties": {
              "dkim": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "value": { "type": "string" }
                }
              },
              "return_path": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "value": { "type": "string" }
                }
              },
              "dmarc": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "value": { "type": "string" }
                }
              }
            }
          },
          "link": {
            "type": "string",
            "format": "uri"
          }
        },
      "example": [
        {
          "has_newsletter": false,
          "ignore_mx_check": false,
          "retention_days": 0,
          "has_regex": false,
          "has_catchall": true,
          "allowlist": [],
          "denylist": [],
          "restricted_alias_names": [],
          "has_adult_content_protection": true,
          "has_phishing_protection": true,
          "has_executable_protection": true,
          "has_virus_protection": true,
          "is_catchall_regex_disabled": false,
          "has_smtp": false,
          "is_smtp_suspended": false,
          "plan": "team",
          "max_recipients_per_alias": 10,
          "smtp_port": "25",
          "name": "test.com",
          "has_mx_record": false,
          "has_txt_record": false,
          "has_dkim_record": false,
          "has_return_path_record": false,
          "has_dmarc_record": false,
          "has_recipient_verification": false,
          "has_custom_verification": false,
          "verification_record": "kcjg6vrO8Q",
          "id": "683f1172c4bad2524410b857",
          "object": "domain",
          "created_at": "2025-06-03T15:14:59.000Z",
          "updated_at": "2025-06-03T15:14:59.254Z",
          "storage_used": 0,
          "storage_used_by_aliases": 0,
          "storage_quota": 10737418240,
          "smtp_dns_records": {
            "dkim": {
              "name": "fe-ebf3212716._domainkey",
              "value": "v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcG+YBDPhyH8bLmyflmU9w1klYDeWpEufIlVqyWqly9lC+J/ntkKn4gum28EeE6vR+55x4JFCR8qSaw0YO1eCRwBgpFB0kKzbELHh2i2TKKwrqB3gPLXp4q4lbcGX2eD6fPCRwckTHqmiOzMhX8GD60zVlEvabok4LJ1i/BOyh6wIDAQAB;"
            },
            "return_path": {
              "name": "fe-bounces",
              "value": "forwardemail.net"
            },
            "dmarc": {
              "name": "_dmarc",
              "value": "v=DMARC1; p=reject; pct=100; rua=mailto:dmarc-683f1172c4bad2524410b857@localhost;"
            }
          },
          "link": "http://localhost:3000/my-account/domains/test.com"
        }
      ]
    },
      "Alias": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Alias ID"
          },
          "name": {
            "type": "string",
            "description": "Alias name"
          },
          "domain": {
            "type": "string",
            "description": "Domain ID"
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            },
            "description": "Array of recipient email addresses"
          }
        }
      },
      "EmailLimit": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Current count of emails sent"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of emails allowed"
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Member ID"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Member's email address"
          },
          "role": {
            "type": "string",
            "description": "Member's role"
          }
        }
      },
      "Invite": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Invited email address"
          }
        }
      }
    },
    "parameters": {
      "page": {
        "name": "page",
        "in": "query",
        "description": "Page of results to return. If not specified, value will be 1. Must be a number greater than or equal to 1.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Number of results to return per page. Defaults to 10 if not specified. Must be a number greater than or equal to 1, and less than or equal to 50.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50,
          "default": 10
        }
      },
      "pagination": {
        "name": "pagination",
        "in": "query",
        "description": "Opt-in to pagination before November 1st, 2024",
        "schema": {
          "type": "boolean"
        }
      },
      "domainId": {
        "name": "domain_id",
        "in": "path",
        "required": true,
        "description": "Domain ID",
        "schema": {
          "type": "string"
        }
      },
      "aliasId": {
        "name": "alias_id",
        "in": "path",
        "required": true,
        "description": "Alias ID",
        "schema": {
          "type": "string"
        }
      },
      "memberId": {
        "name": "member_id",
        "in": "path",
        "required": true,
        "description": "Member ID",
        "schema": {
          "type": "string"
        }
      },
      "emailId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Email ID",
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "Error": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotImplemented": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadGateway": {
        "description": "Bad Gateway",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "GatewayTimeout": {
        "description": "Gateway Time-out",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/v1/account": {
      "post": {
        "summary": "Create account",
        "description": "Create a new user account",
        "tags": [
          "Account"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "get": {
        "summary": "Retrieve account",
        "description": "Retrieve the current user's account information",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "Update account",
        "description": "Update the current user's account information",
        "tags": [
          "Account"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address"
                  },
                  "given_name": {
                    "type": "string",
                    "description": "First name"
                  },
                  "family_name": {
                    "type": "string",
                    "description": "Last name"
                  },
                  "avatar_url": {
                    "type": "string",
                    "description": "Link to avatar image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
             "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/logs/download": {
      "get": {
        "summary": "Download logs",
        "description": "**Download logs**\n\nDescription: Our API programmatically allows you to download logs for your account. Submitting a request to this endpoint will process all logs for your account and email them to you as an attachment (Gzip compressed CSV spreadsheet file) once complete.\n\nThis allows you to create background jobs with a Cron job or using Node.js job scheduling software Bree to receive logs whenever you desire. Note that this endpoint is limited to `10` requests per day.\n\nThe attachment is the lowercase form of `email-deliverability-logs-YYYY-MM-DD-h-mm-A-z.csv.gz` and the email itself contains a brief summary of the logs retrieved.",
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "Filter logs by fully qualified domain (\"FQDN\"). If not provided, all logs across all domains will be retrieved.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search for logs by email, domain, alias name, IP address, or date (M/Y, M/D/YY, M-D, M-D-YY, or M.D.YY format).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bounce_category",
            "in": "query",
            "description": "Search for logs by a specific bounce category (e.g. \"blocklist\").",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_code",
            "in": "query",
            "description": "Search for logs by a specific error response code (e.g. 421 or 550).",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs will be emailed as an attachment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logs will be emailed to you shortly"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/v1/emails": {
      "get": {
        "summary": "List outbound SMTP emails",
        "description": "**List outbound SMTP emails**\n\nNote that this endpoint does not return property values for an email's `message`, `headers`, nor `rejectedErrors`.\n\nTo return those properties and their values, please use the [Retrieve email](https://github.com/forwardemail/forwardemail.net/blob/master/app/views/api/index.md#retrieve-email) endpoint with an email ID.",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search for emails by metadata.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Search for emails by domain name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by a specific field (prefix with a single hyphen - to sort in the reverse direction of that field). Defaults to created_at if not set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "See Pagination for more insight.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "See Pagination for more insight.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of outbound SMTP emails",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Email"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "summary": "Create outbound SMTP email",
        "description": "Our API for creating an email is inspired by and leverages Nodemailer's message option configuration. Please defer to the [Nodemailer message configuration](https://nodemailer.com/message/) for all body parameters below.\n\nNote that with the exception of `envelope` and `dkim` (since we set those automatically for you), we support all Nodemailer options. We automatically set `disableFileAccess` and `disableUrlAccess` options to `true` for security purposes.\n\nYou should either pass the single option of `raw` with your raw full email including headers or pass individual body parameter options below.\n\nThis API endpoint will automatically encode emojis for you if they are found in the headers (e.g. a subject line of `Subject: 🤓 Hello` gets converted to `Subject: =?UTF-8?Q?=F0=9F=A4=93?= Hello` automatically). Our goal was to make an extremely developer-friendly and dummy-proof email API.",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMTP"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/v1/emails/limit": {
      "get": {
        "summary": "Get outbound SMTP email limit",
        "description": "This is a simple endpoint that returns a JSON object containing the `count` and `limit` for the number of daily SMTP outbound messages on a per account basis.",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email limit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailLimit"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/v1/emails/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/emailId"
        }
      ],
      "get": {
        "summary": "Retrieve outbound SMTP email",
        "description": "Retrieve a specific outbound SMTP email.",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Delete outbound SMTP email",
        "description": "Email deletion will set the status to `\"rejected\"` (and subsequently not process it in the queue) if and only if the current status is one of `\"pending\"`, `\"queued\"`, or `\"deferred\"`. We may purge emails automatically after 30 days after they were created and/or sent – therefore you should keep a copy of outbound SMTP emails in your client, database, or application. You can reference our email ID value in your database if desired – this value is returned from both [Create email](https://github.com/forwardemail/forwardemail.net/blob/master/app/views/api/index.md#create-email) and [Retrieve email](https://github.com/forwardemail/forwardemail.net/blob/master/app/views/api/index.md#retrieve-email) endpoints.",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/domains": {
      "get": {
        "summary": "List domains",
        "description": "> [!NOTE]\n>As of November 1st, 2024 the API endpoints for List domains and List domain aliases will default to `1000` max results per page. If you would like to opt-in to this behavior early, you can pass `?paginate=true` as an additional querystring parameter to the URL for the endpoint query. See Pagination for more insight.",
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search for domains by metadata.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Search for domains by domain name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by a specific field (prefix with a single hyphen - to sort in the reverse direction of that field). Defaults to created_at if not set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "See Pagination for more insight.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "See Pagination for more insight.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "summary": "Create domain",
        "description": "**Create domain**\n\nDescription: Create a new domain.\n\nBody Parameters:\n- `name` (String, Required): Domain name\n\nExample Request:\n```\ncurl -X POST https://api.forwardemail.net/v1/domains \\\n  -u API_TOKEN: \\\n  -d \"name=domain.com\"\n```",
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Domain name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "429": {
            "description": "Rate limit exceeded (50 requests for 'create domain')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/domains/{domain_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "Retrieve domain",
        "description": "**Retrieve domain**\n\nDescription: Retrieve a specific domain.\n\nExample Request:\n```\ncurl https://api.forwardemail.net/v1/domains/DOMAIN_ID \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Update domain",
        "description": "**Update domain**\n\nDescription: Update a specific domain.\n\nExample Request:\n```\ncurl -X PUT https://api.forwardemail.net/v1/domains/DOMAIN_ID \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete domain",
        "description": "**Delete domain**\n\nDescription: Delete a specific domain.\n\nExample Request:\n```\ncurl -X DELETE https://api.forwardemail.net/v1/domains/DOMAIN_ID \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Domain deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/verify-records": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "Verify domain records",
        "description": "**Verify domain records**\n\nDescription: Verify DNS records for a specific domain.\n\nExample Request:\n```\ncurl https://api.forwardemail.net/v1/domains/DOMAIN_ID/verify-records \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain records verification result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "verified": {
                      "type": "boolean",
                      "description": "Whether the domain records are verified"
                    },
                    "records": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Record type"
                          },
                          "name": {
                            "type": "string",
                            "description": "Record name"
                          },
                          "value": {
                            "type": "string",
                            "description": "Record value"
                          },
                          "verified": {
                            "type": "boolean",
                            "description": "Whether the record is verified"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/invites": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "Accept domain invite",
        "description": "**Accept domain invite**\n\nDescription: Accept an invitation to a domain.\n\nExample Request:\n```\ncurl https://api.forwardemail.net/v1/domains/DOMAIN_ID/invites \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Invites"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain invite accepted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invite accepted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create domain invite",
        "description": "**Create domain invite**\n\nDescription: Create an invitation to a domain.\n\nBody Parameters:\n- `email` (String, Required): Email address to invite\n\nExample Request:\n```\ncurl -X POST https://api.forwardemail.net/v1/domains/DOMAIN_ID/invites \\\n  -u API_TOKEN: \\\n  -d \"email=user@gmail.com\"\n```",
        "tags": [
          "Invites"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address to invite"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain invite created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "429": {
            "description": "Rate limit exceeded (10 requests for 'create invite')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove domain invite",
        "description": "**Remove domain invite**\n\nDescription: Remove an invitation to a domain.\n\nBody Parameters:\n- `email` (String, Required): Email address to remove invitation for\n\nExample Request:\n```\ncurl -X DELETE https://api.forwardemail.net/v1/domains/DOMAIN_ID/invites \\\n  -u API_TOKEN: \\\n  -d \"email=user@gmail.com\"\n```",
        "tags": [
          "Invites"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address to remove invitation for"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain invite removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invite removed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/members/{member_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        },
        {
          "$ref": "#/components/parameters/memberId"
        }
      ],
      "put": {
        "summary": "Update domain member",
        "description": "**Update domain member**\n\nDescription: Update a domain member.\n\nExample Request:\n```\ncurl -X PUT https://api.forwardemail.net/v1/domains/DOMAIN_ID/members/MEMBER_ID \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Members"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Member's role"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain member updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Remove domain member",
        "description": "**Remove domain member**\n\nDescription: Remove a domain member.\n\nExample Request:\n```\ncurl -X DELETE https://api.forwardemail.net/v1/domains/DOMAIN_ID/members/MEMBER_ID \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Members"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member removed successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/aliases": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "List domain aliases",
        "description": "**List domain aliases**\n\nDescription: List all aliases for a specific domain.\n\nPagination: Supports standard pagination parameters.\n\nExample Request:\n```\ncurl https://api.forwardemail.net/v1/domains/DOMAIN_ID/aliases \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Aliases"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of domain aliases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alias"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create new domain alias",
        "description": "**Create new domain alias**\n\nDescription: Create a new alias for a specific domain.\n\nBody Parameters:\n- `name` (String, Required): Alias name\n- `recipients` (Array, Required): Array of recipient email addresses\n\nExample Request:\n```\ncurl -X POST https://api.forwardemail.net/v1/domains/DOMAIN_ID/aliases \\\n  -u API_TOKEN: \\\n  -d \"name=alias\" \\\n  -d \"recipients[]=user@gmail.com\"\n```",
        "tags": [
          "Aliases"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "recipients"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Alias name"
                  },
                  "recipients": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    },
                    "description": "Array of recipient email addresses"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain alias created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "429": {
            "description": "Rate limit exceeded (300 requests for 'create alias')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/domains/{domain_id}/aliases/{alias_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        },
        {
          "$ref": "#/components/parameters/aliasId"
        }
      ],
      "get": {
        "summary": "Retrieve domain alias",
        "description": "**Retrieve domain alias**\n\nDescription: Retrieve a specific alias for a domain.\n\nExample Request:\n```\ncurl https://api.forwardemail.net/v1/domains/DOMAIN_ID/aliases/ALIAS_ID \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Aliases"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain alias retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Update domain alias",
        "description": "**Update domain alias**\n\nDescription: Update a specific alias for a domain.\n\nExample Request:\n```\ncurl -X PUT https://api.forwardemail.net/v1/domains/DOMAIN_ID/aliases/ALIAS_ID \\\n  -u API_TOKEN: \\\n  -d \"recipients[]=user@gmail.com\"\n```",
        "tags": [
          "Aliases"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipients": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    },
                    "description": "Array of recipient email addresses"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain alias updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete domain alias",
        "description": "**Delete domain alias**\n\nDescription: Delete a specific alias for a domain.\n\nExample Request:\n```\ncurl -X DELETE https://api.forwardemail.net/v1/domains/DOMAIN_ID/aliases/ALIAS_ID \\\n  -u API_TOKEN:\n```",
        "tags": [
          "Aliases"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain alias deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Alias deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/encrypt": {
      "post": {
        "summary": "Encrypt TXT Record",
        "description": "**Encrypt TXT Record**\n\nDescription: Encrypt a TXT record.\n\nBody Parameters:\n- `text` (String, Required): Text to encrypt\n\nExample Request:\n```\ncurl -X POST https://api.forwardemail.net/v1/encrypt \\\n  -u API_TOKEN: \\\n  -d \"text=user@gmail.com\"\n```",
        "tags": [
          "Encrypt"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text"
                ],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text to encrypt"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text encrypted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "encrypted": {
                      "type": "string",
                      "description": "Encrypted text"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "429": {
            "description": "Rate limit exceeded (50 requests for 'encrypt')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts": {
      "get": {
        "summary": "List contacts",
        "description": "List all contacts (CardDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Contacts"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create contact",
        "description": "Create a new contact (CardDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Contacts"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Contact ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve contact",
        "description": "Retrieve a specific contact (CardDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Contacts"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update contact",
        "description": "Update a specific contact (CardDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Contacts"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete contact",
        "description": "Delete a specific contact (CardDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Contacts"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/calendars": {
      "get": {
        "summary": "List calendars",
        "description": "List all calendars (CalDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Calendars"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create calendar",
        "description": "Create a new calendar (CalDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Calendars"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/calendars/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Calendar ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve calendar",
        "description": "Retrieve a specific calendar (CalDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Calendars"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update calendar",
        "description": "Update a specific calendar (CalDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Calendars"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete calendar",
        "description": "Delete a specific calendar (CalDAV). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Calendars"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages": {
      "get": {
        "summary": "List and search for messages",
        "description": "List and search for messages (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Messages"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create message",
        "description": "Create a new message (IMAP/POP3). This will NOT send an email – it will only simply add the message to your mailbox folder (similar to the IMAP APPEND command). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Messages"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Message ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve message",
        "description": "Retrieve a specific message (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Messages"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update message",
        "description": "Update a specific message (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Messages"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete message",
        "description": "Delete a specific message (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Messages"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders": {
      "get": {
        "summary": "List folders",
        "description": "List all folders (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Folders"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create folder",
        "description": "Create a new folder (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Folders"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Folder ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve folder",
        "description": "Retrieve a specific folder (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Folders"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update folder",
        "description": "Update a specific folder (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Folders"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete folder",
        "description": "Delete a specific folder (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Folders"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{id}/copy": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Folder ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Copy folder",
        "description": "Copy a specific folder (IMAP/POP3). This endpoint is coming soon.\n\n_(Detailed markdown description could not be automatically extracted.)_",
        "tags": [
          "Alias Folders"
        ],
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "responses": {
          "501": {
            "description": "Not Implemented - This feature is coming soon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "Account management endpoints"
    },
    {
      "name": "Logs",
      "description": "Log management endpoints"
    },
    {
      "name": "Emails",
      "description": "Email management endpoints"
    },
    {
      "name": "Domains",
      "description": "> [!TIP]\n> Domain endpoints with a domain's name <code>/v1/domains/:domain\\_name</code> as their endpoint are interchangeable with a domain's ID <code>:domain\\_id</code>. This means you can refer to the domain by either its <code>name</code> or <code>id</code> value."
    },
    {
      "name": "Invites",
      "description": "Domain invite management endpoints"
    },
    {
      "name": "Members",
      "description": "Domain member management endpoints"
    },
    {
      "name": "Aliases",
      "description": "Domain alias management endpoints"
    },
    {
      "name": "Encrypt",
      "description": "Encryption endpoints"
    },
    {
      "name": "Alias Contacts",
      "description": "Alias contacts management endpoints (CardDAV)"
    },
    {
      "name": "Alias Calendars",
      "description": "Alias calendars management endpoints (CalDAV)"
    },
    {
      "name": "Alias Messages",
      "description": "Alias messages management endpoints (IMAP/POP3)"
    },
    {
      "name": "Alias Folders",
      "description": "Alias folders management endpoints (IMAP/POP3)"
    }
  ]
}